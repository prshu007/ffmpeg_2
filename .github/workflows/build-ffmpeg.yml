# .github/workflows/build.yml
#
# This GitHub Actions workflow builds a static version of FFmpeg for Linux (amd64)
# with the libx264 encoder enabled. It is specifically configured to be compatible with
# a wide range of GLIBC versions, from 2.29 to 2.35 and newer.
#
# The workflow is split into two jobs to resolve a GLIBC conflict between the
# GitHub Actions runner environment and the older build container.
#
# 1. 'checkout-source': Runs on a modern runner to check out the code.
# 2. 'build-ffmpeg': Runs in an older container (ubuntu:18.04) to perform the build.

name: Build Static FFmpeg

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches: [ "main" ]

jobs:
  # Job 1: Checks out the source code in a modern environment
  checkout-source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Upload source code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: source-code
          path: .

  # Job 2: Builds FFmpeg inside the older container for GLIBC compatibility
  build-ffmpeg:
    # This job depends on the 'checkout-source' job completing successfully
    needs: checkout-source
    runs-on: ubuntu-latest
    
    # To ensure compatibility with older GLIBC (e.g., 2.29), we build on
    # ubuntu:18.04, which has GLIBC 2.27. A binary compiled against an older
    # GLIBC is forward-compatible with newer versions.
    container: ubuntu:18.04

    steps:
    # Step 1: Download the source code artifact from the previous job
    - name: Download source code artifact
      uses: actions/download-artifact@v4
      with:
        name: source-code
        path: /github/workspace # Download to the working directory inside the container

    # Step 2: Set up the build environment
    # This involves creating directories for dependencies, sources, and the final build.
    - name: Set up build environment
      run: |
        mkdir -p ~/ffmpeg_sources ~/ffmpeg_build ~/bin
        echo "Build environment directories created."

    # Step 3: Install required dependencies in the container
    - name: Install dependencies
      run: |
        apt-get update -y
        apt-get install -y --no-install-recommends \
          autoconf \
          automake \
          build-essential \
          cmake \
          git-core \
          libass-dev \
          libfreetype6-dev \
          libgnutls28-dev \
          libtool \
          libva-dev \
          libvdpau-dev \
          libvorbis-dev \
          libxcb1-dev \
          libxcb-shm0-dev \
          libxcb-xfixes0-dev \
          meson \
          nasm \
          ninja-build \
          pkg-config \
          texinfo \
          wget \
          yasm \
          zlib1g-dev

    # Step 4: Compile and install libx264
    - name: Build and install libx264
      run: |
        echo "Building libx264 from source..."
        cd ~/ffmpeg_sources
        git clone --branch stable --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure --prefix="$HOME/ffmpeg_build" --bindir="$HOME/bin" --enable-static --enable-pic
        make -j$(nproc)
        make install
        echo "libx264 build and installation complete."

    # Step 5: Compile FFmpeg
    - name: Build FFmpeg
      run: |
        echo "Building FFmpeg from source..."
        cd ~/ffmpeg_sources
        wget -O ffmpeg-snapshot.tar.bz2 https://ffmpeg.org/releases/ffmpeg-snapshot.tar.bz2
        tar xjvf ffmpeg-snapshot.tar.bz2
        cd ffmpeg
        export PATH="$HOME/bin:$PATH"
        export PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig"
        ./configure \
          --prefix="$HOME/ffmpeg_build" \
          --pkg-config-flags="--static" \
          --extra-cflags="-I$HOME/ffmpeg_build/include" \
          --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
          --extra-libs="-lpthread -lm" \
          --bindir="$HOME/bin" \
          --enable-gpl \
          --enable-libass \
          --enable-libfreetype \
          --enable-libvorbis \
          --enable-libx264 \
          --enable-nonfree \
          --disable-shared \
          --enable-static
        make -j$(nproc)
        make install
        echo "FFmpeg build and installation complete."

    # Step 6: Upload the final static FFmpeg binary as an artifact
    - name: Upload FFmpeg static build
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-static-linux-amd64
        path: ~/bin/ffmpeg
